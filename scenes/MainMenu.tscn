[gd_scene load_steps=19 format=2]

[ext_resource path="res://ui/uitheme.tres" type="Theme" id=1]
[ext_resource path="res://common/BlueGradient.tres" type="Gradient" id=2]
[ext_resource path="res://ui/HighScore.gd" type="Script" id=3]
[ext_resource path="res://assets/Font.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://common/TrailWidthCurve.tres" type="Curve" id=5]
[ext_resource path="res://effects/BloomEnvironment.tscn" type="PackedScene" id=6]
[ext_resource path="res://common/Trail.tscn" type="PackedScene" id=7]
[ext_resource path="res://ui/DepthMeter.gd" type="Script" id=8]
[ext_resource path="res://ui/normal.tres" type="DynamicFont" id=10]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0.6, 0.6, 0.6, 0 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
corner_radius_top_left = 42
corner_radius_top_right = 42
corner_radius_bottom_right = 42
corner_radius_bottom_left = 42

[sub_resource type="GDScript" id=2]
script/source = "extends Panel

func _ready():
	Global.update_OS_status()
	if Global.is_mobile:
		self.get_stylebox(\"panel\", \"\").set_corner_radius_all(42)
	else:
		self.get_stylebox(\"panel\", \"\").set_corner_radius_all(0)
"

[sub_resource type="DynamicFont" id=4]
size = 125
outline_size = 1
use_mipmaps = true
use_filter = true
extra_spacing_char = 20
font_data = ExtResource( 4 )

[sub_resource type="GDScript" id=5]
script/source = "extends Label

  
var timer

var color_time = 0
var size_time = 0
var duration = 1 # length of the effect
var new_color = modulate

func _ready():
	timer = Timer.new()
	timer.wait_time = duration
	timer.connect(\"timeout\", self,\"_on_timer_timeout\") 
	add_child(timer) #to process
	timer.start() #to start

func _process(delta):
	if color_time < duration:
		color_time += delta
		modulate = lerp(modulate, new_color, color_time / duration)
	if size_time < duration:
		size_time += delta


func _on_timer_timeout():
	randomize()
	color_time = 0
	new_color = Color(randf(),randf(),randf(), 1)
	
func _on_Title_gui_input(event):
	if (event is InputEventMouseButton && event.pressed && event.button_index == 1):
		timer.paused = !timer.paused
		$AnimationPlayer.play(\"Click\")

func _on_AnimationPlayer_animation_finished(anim_name):
	if anim_name == \"Click\":
		$AnimationPlayer.play(\"Idle\")
"

[sub_resource type="Animation" id=6]
resource_name = "Click"
length = 0.5
step = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 0,
"values": [ Vector2( 2, 2 ), Vector2( 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:custom_constants/shadow_offset_x")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 5, 1, 5 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:custom_constants/shadow_offset_y")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 5, 20, 5 ]
}

[sub_resource type="Animation" id=7]
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.1, 2 ),
"transitions": PoolRealArray( 1, 0.5, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.7, 1.7 ), Vector2( 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rect_rotation")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4, 1.5, 2.1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0, -1.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:custom_constants/shadow_offset_x")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.9, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 5, 0, 5 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath(".:custom_constants/shadow_offset_y")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.9, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 5, 20, 5 ]
}

[sub_resource type="GDScript" id=8]
script/source = "extends Button

func _ready() -> void:
		
	connect(\"pressed\", self, \"_on_pressed\")
	
func _on_pressed() -> void:
	if Engine.has_singleton(\"Haptic\"):
		Engine.get_singleton(\"Haptic\").impact(1)
	get_tree().change_scene(\"res://scenes/Arena.tscn\")
"

[sub_resource type="GDScript" id=9]
script/source = "extends Button

func _ready() -> void:
	connect(\"pressed\", self, \"_on_pressed\")
	if OS.get_name() == \"iOS\":
		hide()
	
func _on_pressed() -> void:
	if Engine.has_singleton(\"Haptic\"):
		Engine.get_singleton(\"Haptic\").impact(1)
	get_tree().notification(MainLoop.NOTIFICATION_WM_QUIT_REQUEST)


"

[sub_resource type="GDScript" id=10]
script/source = "extends Node2D

var velocity = Vector2(1, 1)

func _process(delta: float) -> void:
	global_position = lerp(global_position, get_global_mouse_position(), 0.8)
	look_at(get_global_mouse_position())
"

[node name="MainMenu" type="Node"]

[node name="BloomEnvironment" parent="." instance=ExtResource( 6 )]

[node name="UI" type="Panel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_styles/panel = SubResource( 1 )
script = SubResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="MarginContainer" parent="UI"]
margin_right = 897.0
margin_bottom = 414.0
custom_constants/margin_right = 20
custom_constants/margin_top = 20
custom_constants/margin_left = 20
custom_constants/margin_bottom = 20
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer2" type="VBoxContainer" parent="UI/Control"]
margin_left = 20.0
margin_top = 20.0
margin_right = 877.0
margin_bottom = 394.0

[node name="HBoxContainer" type="HBoxContainer" parent="UI/Control/VBoxContainer2"]
margin_right = 857.0
margin_bottom = 22.0
size_flags_horizontal = 3

[node name="HighScore" type="Label" parent="UI/Control/VBoxContainer2/HBoxContainer"]
modulate = Color( 1, 1, 1, 0.654902 )
margin_right = 426.0
margin_bottom = 22.0
rect_pivot_offset = Vector2( -275, -408 )
size_flags_horizontal = 3
size_flags_vertical = 0
custom_constants/shadow_offset_x = 2
custom_constants/shadow_offset_y = 0
custom_fonts/font = ExtResource( 10 )
text = "100"
valign = 1
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LongestDistance" type="Label" parent="UI/Control/VBoxContainer2/HBoxContainer"]
modulate = Color( 1, 1, 1, 0.654902 )
margin_left = 430.0
margin_right = 857.0
margin_bottom = 22.0
rect_pivot_offset = Vector2( -275, -408 )
size_flags_horizontal = 3
size_flags_vertical = 0
custom_constants/shadow_offset_x = 2
custom_constants/shadow_offset_y = 0
custom_fonts/font = ExtResource( 10 )
text = "100^"
align = 2
script = ExtResource( 8 )

[node name="VBoxContainer" type="HBoxContainer" parent="UI/Control/VBoxContainer2"]
margin_top = 26.0
margin_right = 857.0
margin_bottom = 374.0
size_flags_vertical = 3
alignment = 1

[node name="Title" type="Label" parent="UI/Control/VBoxContainer2/VBoxContainer"]
margin_right = 760.0
margin_bottom = 348.0
rect_pivot_offset = Vector2( 380, 153 )
mouse_filter = 1
mouse_default_cursor_shape = 2
size_flags_horizontal = 3
size_flags_vertical = 3
custom_colors/font_color = Color( 0.0117647, 0.662745, 0.956863, 1 )
custom_colors/font_color_shadow = Color( 0.0117647, 0.662745, 0.956863, 0.537255 )
custom_constants/shadow_offset_x = 5
custom_constants/shadow_offset_y = 5
custom_fonts/font = SubResource( 4 )
text = "DASHIE"
align = 1
valign = 1
script = SubResource( 5 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="UI/Control/VBoxContainer2/VBoxContainer/Title"]
autoplay = "Idle"
anims/Click = SubResource( 6 )
anims/Idle = SubResource( 7 )

[node name="VBoxContainer" type="VBoxContainer" parent="UI/Control/VBoxContainer2/VBoxContainer"]
margin_left = 764.0
margin_right = 857.0
margin_bottom = 348.0
size_flags_horizontal = 0
custom_constants/separation = 24
alignment = 1

[node name="ButtonStart" type="Button" parent="UI/Control/VBoxContainer2/VBoxContainer/VBoxContainer"]
margin_top = 109.0
margin_right = 93.0
margin_bottom = 162.0
size_flags_horizontal = 3
size_flags_vertical = 0
theme = ExtResource( 1 )
text = "START"
script = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ButtonQuit" type="Button" parent="UI/Control/VBoxContainer2/VBoxContainer/VBoxContainer"]
margin_top = 186.0
margin_right = 93.0
margin_bottom = 239.0
size_flags_horizontal = 3
size_flags_vertical = 4
theme = ExtResource( 1 )
text = "QUIT"
script = SubResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Node" type="Node" parent="."]

[node name="Trail" parent="Node" instance=ExtResource( 7 )]
z_index = -1
width = 1.0
width_curve = ExtResource( 5 )
default_color = Color( 0, 0.670588, 1, 0.839216 )
gradient = ExtResource( 2 )
targetPath = NodePath("../../MouseFollow")
wobble = true
target_width_multiplier = 20

[node name="MouseFollow" type="Polygon2D" parent="."]
rotation = -1.97222
scale = Vector2( 0.3, 0.3 )
color = Color( 0, 0.670588, 1, 0.839216 )
offset = Vector2( 21.724, 0 )
polygon = PoolVector2Array( 0, 0, -32, 16, -24, 0, -32, -16 )
script = SubResource( 10 )

[connection signal="gui_input" from="UI/Control/VBoxContainer2/VBoxContainer/Title" to="UI/Control/VBoxContainer2/VBoxContainer/Title" method="_on_Title_gui_input"]
[connection signal="animation_finished" from="UI/Control/VBoxContainer2/VBoxContainer/Title/AnimationPlayer" to="UI/Control/VBoxContainer2/VBoxContainer/Title" method="_on_AnimationPlayer_animation_finished"]
